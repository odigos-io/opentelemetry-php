name: OpenTelemetry PHP Agent Tests

on:
  pull_request:
    branches: [main]

env:
  OTEL_COLLECTOR_GRPC_PORT: 4317
  OTEL_COLLECTOR_HTTP_PORT: 4318

jobs:
  setup-otel-environment:
    runs-on: ubuntu-latest
    outputs:
      collector-endpoint: ${{ steps.setup.outputs.collector-endpoint }}
    steps:
      - name: Setup Docker
        run: |
          sudo systemctl start docker
          sudo systemctl status docker || exit 1

      - name: Setup OpenTelemetry Collector
        id: setup
        run: |
          # Create collector config
          cat > collector-config.yaml << 'EOF'
          receivers:
            otlp:
              protocols:
                grpc:
                  endpoint: 0.0.0.0:4317
                http:
                  endpoint: 0.0.0.0:4318
          processors:
            batch:
          exporters:
            debug:
              verbosity: detailed
          service:
            pipelines:
              traces:
                receivers: [otlp]
                processors: [batch]
                exporters: [debug]
          EOF

          # Start collector in background with log file mounting
          docker run -d \
            --name otel-collector \
            -p 4317:4317 \
            -p 4318:4318 \
            -v $(pwd)/collector-config.yaml:/etc/otelcol/config.yaml \
            otel/opentelemetry-collector:latest \
            --config /etc/otelcol/config.yaml

          # Set output
          echo "collector-endpoint=http://localhost:$OTEL_COLLECTOR_HTTP_PORT" >> $GITHUB_OUTPUT

      - name: Verify OpenTelemetry Collector is running & ready
        run: |
          echo "Checking if collector is running..."
          for i in {1..30}; do
            if docker ps | grep -q otel-collector && netstat -tlnp 2>/dev/null | grep -q ":4317\|:4318"; then
              echo "✅ Collector is running"
              break
            fi
            if [ "$i" = 30 ]; then
              echo "❌ Collector is not running after 30 attempts"
              exit 1
            fi
            echo "Attempt $i/30: Waiting for collector..."
            sleep 2
          done

          echo "Checking collector logs for readiness..."
          for i in {1..30}; do
            COLLECTOR_LOGS=$(docker logs otel-collector 2>&1 || echo "⚠️ Docker logs failed")
            if echo "$COLLECTOR_LOGS" | grep -q "Starting GRPC server" && \
                echo "$COLLECTOR_LOGS" | grep -q "Starting HTTP server" && \
                echo "$COLLECTOR_LOGS" | grep -q "Everything is ready"; then
              echo "✅ Collector is ready"
              break
            fi
            if [ "$i" = 30 ]; then
              echo "❌ Collector is not ready after 30 attempts"
              echo "Final logs:"
              echo "$COLLECTOR_LOGS"
              exit 1
            fi
            echo "Attempt $i/30: Waiting for readiness..."
            sleep 2
          done

  test-symfony-apps:
    needs: setup-otel-environment
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        include:
          - php-version: '8.0'
            architecture: amd64
            symfony-version: '6.0.*'
            runner: ubuntu-latest
          - php-version: '8.0'
            architecture: arm64
            symfony-version: '6.0.*'
            runner: ubuntu-latest
          - php-version: '8.1'
            architecture: amd64
            symfony-version: '6.4.*'
            runner: ubuntu-latest
          - php-version: '8.1'
            architecture: arm64
            symfony-version: '6.4.*'
            runner: ubuntu-latest
          - php-version: '8.2'
            architecture: amd64
            symfony-version: '7.3.*'
            runner: ubuntu-latest
          - php-version: '8.2'
            architecture: arm64
            symfony-version: '7.3.*'
            runner: ubuntu-latest
          - php-version: '8.3'
            architecture: amd64
            symfony-version: '7.3.*'
            runner: ubuntu-latest
          - php-version: '8.3'
            architecture: arm64
            symfony-version: '7.3.*'
            runner: ubuntu-latest
          - php-version: '8.4'
            architecture: amd64
            symfony-version: '7.3.*'
            runner: ubuntu-latest
          - php-version: '8.4'
            architecture: arm64
            symfony-version: '7.3.*'
            runner: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP ${{ matrix.php-version }}
        uses: shivammathur/setup-php@v2
        with:
          php-version: '${{ matrix.php-version }}'
          extensions: mbstring, xml, ctype, iconv, intl, pdo_sqlite, curl, json
          tools: composer:v2

      - name: Create Application
        run: |
          # Create new Symfony app
          composer create-project symfony/skeleton:"${{ matrix.symfony-version }}" symfony-app-${{ matrix.php-version }}-${{ matrix.architecture }}
          cd symfony-app-${{ matrix.php-version }}-${{ matrix.architecture }}

          # Add a simple controller for testing
          mkdir -p src/Controller
          cat > src/Controller/TestController.php << 'EOF'
          <?php

          namespace App\Controller;

          use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
          use Symfony\Component\HttpFoundation\JsonResponse;
          use Symfony\Component\Routing\Annotation\Route;

          class TestController extends AbstractController
          {
              #[Route('/test', name: 'app_test')]
              public function test(): JsonResponse
              {
                  return new JsonResponse([
                      'message' => 'Hello from Symfony!',
                      'php_version' => PHP_VERSION,
                      'architecture' => '${{ matrix.architecture }}',
                      'timestamp' => time()
                  ]);
              }
          }
          EOF

          # Install dependencies
          composer install --no-dev --optimize-autoloader

      - name: Configure OpenTelemetry Agent
        run: |
          cd symfony-app-${{ matrix.php-version }}-${{ matrix.architecture }}

          # Copy agent files to the app
          mkdir -p var/odigos/php/${{ matrix.php-version }}
          cp -r ../${{ matrix.php-version }}/* var/odigos/php/${{ matrix.php-version }}/

          # Move the correct architecture binary to the root of the agent directory
          mv var/odigos/php/${{ matrix.php-version }}/bin/${{ matrix.architecture }}/* var/odigos/php/${{ matrix.php-version }}/
          rm -rf var/odigos/php/${{ matrix.php-version }}/bin

          # Update paths in opentelemetry.ini
          sed -i "s|/var/odigos/php/${{ matrix.php-version }}|$(pwd)/var/odigos/php/${{ matrix.php-version }}|g" var/odigos/php/${{ matrix.php-version }}/opentelemetry.ini

          # Update paths in preload.php
          sed -i "s|/var/odigos/php/${{ matrix.php-version }}|$(pwd)/var/odigos/php/${{ matrix.php-version }}|g" var/odigos/php/${{ matrix.php-version }}/preload.php

      - name: Configure Environment Variables
        run: |
          cd symfony-app-${{ matrix.php-version }}-${{ matrix.architecture }}

          # Create .env.local with OpenTelemetry configuration
          cat > .env.local << EOF
          # OpenTelemetry Configuration
          OTEL_PHP_AUTOLOAD_ENABLED=true
          PHP_INI_SCAN_DIR=$(pwd)/var/odigos/php/${{ matrix.php-version }}:

          # OpenTelemetry SDK Configuration
          OTEL_SERVICE_NAME=symfony-app-${{ matrix.php-version }}-${{ matrix.architecture }}
          OTEL_TRACES_EXPORTER=otlp,console
          OTEL_METRICS_EXPORTER=none
          OTEL_LOGS_EXPORTER=none

          # OTLP Exporter Configuration
          OTEL_EXPORTER_OTLP_ENDPOINT=${{ needs.setup-otel-environment.outputs.collector-endpoint }}
          OTEL_EXPORTER_OTLP_PROTOCOL=http/protobuf
          EOF

      - name: Start Application
        run: |
          cd symfony-app-${{ matrix.php-version }}-${{ matrix.architecture }}

          # Start Symfony server in background
          php -S localhost:8000 -t public/ &
          SYMFONY_PID=$!
          echo $SYMFONY_PID > symfony.pid

          # Wait for server to be ready
          sleep 5

      - name: Generate Traffic
        run: |
          cd symfony-app-${{ matrix.php-version }}-${{ matrix.architecture }}

          echo "Verifying OpenTelemetry extension..."
          php -m | grep opentelemetry || echo "OpenTelemetry extension not loaded"

          echo "Generating traffic..."
          for i in {1..30}; do
            if curl -f http://localhost:8000/test > /dev/null 2>&1; then
              echo "✅ Server is ready and responding"
              break
            fi
            if [ "$i" = 30 ]; then
              echo "❌ Server is not ready after 30 attempts"
              exit 1
            fi
            echo "Attempt $i/30: Server not ready yet..."
            sleep 2
          done

          # Wait a bit for trace processing
          sleep 5

      - name: Verify Trace Generation
        run: |
          echo "Verifying trace generation..."
          COLLECTOR_LOGS=$(docker logs otel-collector 2>&1 || echo "⚠️ Docker logs failed")

          if echo "$COLLECTOR_LOGS" | grep -q "trace\|span\|TraceID\|SpanID"; then
            echo "✅ Traces detected in collector logs"
            echo "$COLLECTOR_LOGS" | grep -i "trace\|span" | head -10
          else
            echo "❌ No traces found in collector logs"
            echo "Collector logs:"
            echo "$COLLECTOR_LOGS"
            exit 1
          fi

      - name: Cleanup Application
        if: always()
        run: |
          cd symfony-app-${{ matrix.php-version }}-${{ matrix.architecture }}

          # Stop Symfony server
          if [ -f symfony.pid ]; then
            kill $(cat symfony.pid) || true
            rm symfony.pid
          fi

          # Clean up
          cd ..
          rm -rf symfony-app-${{ matrix.php-version }}-${{ matrix.architecture }}

  cleanup-environment:
    needs: [setup-otel-environment, test-symfony-apps]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Cleanup OpenTelemetry Collector
        run: |
          echo "Cleaning up OpenTelemetry Collector..."

          # Stop and remove the container
          docker stop otel-collector || echo "Container was not running or already stopped"
          docker rm otel-collector || echo "Container was not found or already removed"

          # Clean up any dangling containers or images
          docker container prune -f || echo "No containers to prune"
          docker image prune -f || echo "No images to prune"

          echo "Cleanup completed"
