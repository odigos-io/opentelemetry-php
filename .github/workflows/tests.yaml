name: OpenTelemetry PHP Agent E2E Tests

on: pull_request

env:
  OTEL_COLLECTOR_GRPC_PORT: 4317
  OTEL_COLLECTOR_HTTP_PORT: 4318

jobs:
  e2e-tests:
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - php-version: '8.0'
            architecture: amd64
            symfony-version: '6.0.*'
            runner: ubuntu-latest
          - php-version: '8.0'
            architecture: arm64
            symfony-version: '6.0.*'
            runner: ubuntu-latest
          - php-version: '8.1'
            architecture: amd64
            symfony-version: '6.4.*'
            runner: ubuntu-latest
          - php-version: '8.1'
            architecture: arm64
            symfony-version: '6.4.*'
            runner: ubuntu-latest
          - php-version: '8.2'
            architecture: amd64
            symfony-version: '7.3.*'
            runner: ubuntu-latest
          - php-version: '8.2'
            architecture: arm64
            symfony-version: '7.3.*'
            runner: ubuntu-latest
          - php-version: '8.3'
            architecture: amd64
            symfony-version: '7.3.*'
            runner: ubuntu-latest
          - php-version: '8.3'
            architecture: arm64
            symfony-version: '7.3.*'
            runner: ubuntu-latest
          - php-version: '8.4'
            architecture: amd64
            symfony-version: '7.3.*'
            runner: ubuntu-latest
          - php-version: '8.4'
            architecture: arm64
            symfony-version: '7.3.*'
            runner: ubuntu-latest

    env:
      SERVICE_NAME: 'symfony-app-${{ matrix.php-version }}-${{ matrix.architecture }}'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP ${{ matrix.php-version }}
        uses: shivammathur/setup-php@v2
        with:
          php-version: '${{ matrix.php-version }}'
          extensions: mbstring, xml, ctype, iconv, intl, pdo_sqlite, curl, json
          tools: composer:v2

      - name: Setup Docker
        run: |
          sudo systemctl start docker
          sudo systemctl status docker || (echo "⚠️ Docker is not running" && exit 1)

      - name: Setup OpenTelemetry Collector
        run: |
          cat > collector-config.yaml << 'EOF'
          receivers:
            otlp:
              protocols:
                grpc:
                  endpoint: 0.0.0.0:4317
                http:
                  endpoint: 0.0.0.0:4318
          processors:
            batch:
          exporters:
            debug:
              verbosity: detailed
          service:
            pipelines:
              traces:
                receivers: [otlp]
                processors: [batch]
                exporters: [debug]
          EOF

      - name: Start OpenTelemetry Collector
        run: |
          docker run -d \
            --name otel-collector \
            -p 4317:4317 \
            -p 4318:4318 \
            -v $(pwd)/collector-config.yaml:/etc/otelcol/config.yaml \
            otel/opentelemetry-collector:latest \
            --config /etc/otelcol/config.yaml

      - name: Verify OpenTelemetry Collector is running
        run: |
          echo "Checking if collector is running..."
          for i in {1..30}; do
            if docker ps | grep -q otel-collector && netstat -tlnp 2>/dev/null | grep -q ":4317\|:4318"; then
              echo "✅ Collector is running"
              break
            fi
            if [ "$i" = 30 ]; then
              echo "❌ Collector is not running after 30 attempts"
              exit 1
            fi
            echo "Attempt $i/30: Waiting for collector..."
            sleep 2
          done

      - name: Verify OpenTelemetry Collector is ready
        run: |
          echo "Checking collector logs for readiness..."
          for i in {1..30}; do
            COLLECTOR_LOGS=$(docker logs otel-collector 2>&1 || (echo "⚠️ Docker logs failed" && exit 1))
            if echo "$COLLECTOR_LOGS" | grep -q "Starting GRPC server" && \
                echo "$COLLECTOR_LOGS" | grep -q "Starting HTTP server" && \
                echo "$COLLECTOR_LOGS" | grep -q "Everything is ready"; then
              echo "✅ Collector is ready"
              break
            fi
            if [ "$i" = 30 ]; then
              echo "❌ Collector is not ready after 30 attempts"
              exit 1
            fi
            echo "Attempt $i/30: Waiting for readiness..."
            sleep 2
          done

      - name: Configure OpenTelemetry PHP Agent
        run: |
          # Copy agent files to the app
          mkdir -p var/odigos/php/${{ matrix.php-version }}
          cp -r ${{ matrix.php-version }}/* var/odigos/php/${{ matrix.php-version }}/

          # Move the correct architecture binary to the root of the agent directory
          mv var/odigos/php/${{ matrix.php-version }}/bin/${{ matrix.architecture }}/* var/odigos/php/${{ matrix.php-version }}/
          rm -rf var/odigos/php/${{ matrix.php-version }}/bin

          # Update paths in opentelemetry.ini
          sed -i "s|/var/odigos/php/${{ matrix.php-version }}|$(pwd)/var/odigos/php/${{ matrix.php-version }}|g" var/odigos/php/${{ matrix.php-version }}/opentelemetry.ini

          # Update paths in preload.php
          sed -i "s|/var/odigos/php/${{ matrix.php-version }}|$(pwd)/var/odigos/php/${{ matrix.php-version }}|g" var/odigos/php/${{ matrix.php-version }}/preload.php

      - name: Create Application
        run: |
          # Create new Symfony app
          composer create-project symfony/skeleton:"${{ matrix.symfony-version }}" ${{ env.SERVICE_NAME }}
          cd ${{ env.SERVICE_NAME }}

          # Add a simple controller for testing
          mkdir -p src/Controller
          cat > src/Controller/TestController.php << 'EOF'
          <?php

          namespace App\Controller;

          use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
          use Symfony\Component\HttpFoundation\JsonResponse;
          use Symfony\Component\Routing\Annotation\Route;

          class TestController extends AbstractController
          {
              #[Route('/test', name: 'app_test')]
              public function test(): JsonResponse
              {
                  return new JsonResponse([
                      'message' => 'Hello from Symfony!',
                      'php_version' => PHP_VERSION,
                      'architecture' => '${{ matrix.architecture }}',
                      'timestamp' => time()
                  ]);
              }
          }
          EOF

          # Install dependencies
          composer install --no-dev --optimize-autoloader

      - name: Start Application
        run: |
          cd ${{ env.SERVICE_NAME }}

          export OTEL_PHP_AUTOLOAD_ENABLED=true
          export PHP_INI_SCAN_DIR=$(pwd)/var/odigos/php/${{ matrix.php-version }}:
          export OTEL_SERVICE_NAME=${{ env.SERVICE_NAME }}
          export OTEL_TRACES_EXPORTER=console,otlp
          export OTEL_METRICS_EXPORTER=none
          export OTEL_LOGS_EXPORTER=none
          export OTEL_EXPORTER_OTLP_ENDPOINT=http://localhost:$OTEL_COLLECTOR_HTTP_PORT
          export OTEL_EXPORTER_OTLP_PROTOCOL=http/protobuf

          php -S localhost:8000 -t public/ &
          SYMFONY_PID=$!
          echo $SYMFONY_PID > symfony.pid

      - name: Generate Traffic
        run: |
          cd ${{ env.SERVICE_NAME }}

          echo "Verifying OpenTelemetry extension..."
          php -m | grep opentelemetry || (echo "⚠️ OpenTelemetry extension not loaded" && exit 1)

          echo "Generating traffic..."
          for i in {1..30}; do
            if curl -f http://localhost:8000/test > /dev/null 2>&1; then
              echo "✅ Server is ready, traffic generated"
              break
            fi
            if [ "$i" = 30 ]; then
              echo "❌ Server is not ready after 30 attempts"
              exit 1
            fi
            echo "Attempt $i/30: Server not ready yet..."
            sleep 2
          done

          # Wait a bit for trace processing
          sleep 5

      - name: Verify Trace Generation
        run: |
          echo "Verifying trace generation..."
          COLLECTOR_LOGS=$(docker logs otel-collector 2>&1 || (echo "⚠️ Docker logs failed" && exit 1))
          SPAN_ATTRIBUTE="\"service.name\": \"${{ env.SERVICE_NAME }}\""

          if echo "$COLLECTOR_LOGS" | grep -q "$SPAN_ATTRIBUTE"; then
            echo "✅ Traces detected in collector logs"
            echo "$COLLECTOR_LOGS" | grep -i "$SPAN_ATTRIBUTE"
          else
            echo "❌ No traces found in collector logs"
            echo "Collector logs:"
            echo "$COLLECTOR_LOGS"
            exit 1
          fi

      - name: Cleanup
        if: always()
        run: |
          echo "Cleaning up Application..."
          cd ${{ env.SERVICE_NAME }}

          # Stop app
          if [ -f symfony.pid ]; then
            kill $(cat symfony.pid) || true
            rm symfony.pid
          fi

          # Cleanup app
          cd .. && rm -rf ${{ env.SERVICE_NAME }}

          echo "Cleaning up OpenTelemetry Collector..."

          # Stop and remove the container
          docker stop otel-collector || echo "Container was not running or already stopped"
          docker rm otel-collector || echo "Container was not found or already removed"

          # Clean up any dangling containers or images
          docker container prune -f || echo "No containers to prune"
          docker image prune -f || echo "No images to prune"

          echo "✅ Cleanup completed"
